// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SkillSwap.Models;

#nullable disable

namespace SkillSwap.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240924010150_SeAgreganSeeders3")]
    partial class SeAgreganSeeders3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8_general_ci")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("SkillSwap.Models.Ability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abilities")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("abilities");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("category");

                    b.HasKey("Id");

                    b.ToTable("Abilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abilities = "Programación en C#, Desarrollo Web, Bases de Datos",
                            Category = "Desarrollo"
                        },
                        new
                        {
                            Id = 2,
                            Abilities = "Diseño Gráfico, UX/UI, Illustrator",
                            Category = "Diseño"
                        },
                        new
                        {
                            Id = 3,
                            Abilities = "Habilidades de Presentación, Redacción, Negociación",
                            Category = "Comunicación"
                        },
                        new
                        {
                            Id = 4,
                            Abilities = "Estrategias de SEO, Marketing de Contenidos, Publicidad Digital",
                            Category = "Marketing"
                        },
                        new
                        {
                            Id = 5,
                            Abilities = "Producción de Video, Edición de Audio, Actuación",
                            Category = "Entretenimiento"
                        },
                        new
                        {
                            Id = 6,
                            Abilities = "JavaScript, HTML, CSS",
                            Category = "Desarrollo"
                        },
                        new
                        {
                            Id = 7,
                            Abilities = "UX/UI, Adobe Photoshop, Illustrator",
                            Category = "Diseño"
                        },
                        new
                        {
                            Id = 8,
                            Abilities = "Redacción, Presentaciones, Relaciones Públicas",
                            Category = "Comunicación"
                        },
                        new
                        {
                            Id = 9,
                            Abilities = "Marketing de Contenidos, PPC, Email Marketing",
                            Category = "Marketing"
                        },
                        new
                        {
                            Id = 10,
                            Abilities = "Edición de Video, Producción de Podcast, Fotografía",
                            Category = "Entretenimiento"
                        });
                });

            modelBuilder.Entity("SkillSwap.Models.Qualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccumulatorAdition")
                        .HasColumnType("int(11)")
                        .HasColumnName("accumulator_adition");

                    b.Property<int?>("Count")
                        .HasColumnType("int(11)")
                        .HasColumnName("count");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Qualifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccumulatorAdition = 35,
                            Count = 10
                        },
                        new
                        {
                            Id = 2,
                            AccumulatorAdition = 15,
                            Count = 5
                        },
                        new
                        {
                            Id = 3,
                            AccumulatorAdition = 60,
                            Count = 15
                        },
                        new
                        {
                            Id = 4,
                            AccumulatorAdition = 24,
                            Count = 8
                        },
                        new
                        {
                            Id = 5,
                            AccumulatorAdition = 45,
                            Count = 12
                        },
                        new
                        {
                            Id = 6,
                            AccumulatorAdition = 35,
                            Count = 10
                        },
                        new
                        {
                            Id = 7,
                            AccumulatorAdition = 15,
                            Count = 5
                        },
                        new
                        {
                            Id = 8,
                            AccumulatorAdition = 60,
                            Count = 15
                        },
                        new
                        {
                            Id = 9,
                            AccumulatorAdition = 24,
                            Count = 8
                        },
                        new
                        {
                            Id = 10,
                            AccumulatorAdition = 45,
                            Count = 12
                        });
                });

            modelBuilder.Entity("SkillSwap.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionTaken")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("action_taken");

                    b.Property<DateOnly>("DateReport")
                        .HasColumnType("date")
                        .HasColumnName("date_report");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.Property<int>("IdReportedUser")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_user_reported");

                    b.Property<int>("IdState")
                        .HasColumnType("int")
                        .HasColumnName("id_state_report");

                    b.Property<int>("IdUser")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_user");

                    b.Property<string>("TitleReport")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("IdReportedUser");

                    b.HasIndex("IdState");

                    b.HasIndex("IdUser");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("SkillSwap.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("DisponibilitySchedule")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("disponibility_schedule");

                    b.Property<int?>("IdReceivingUser")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_receiving_user");

                    b.Property<int?>("IdRequestingUser")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_requesting_user");

                    b.Property<int?>("IdStateRequest")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_state_request");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdReceivingUser" }, "id_receiving_user");

                    b.HasIndex(new[] { "IdRequestingUser" }, "id_requesting_user");

                    b.HasIndex(new[] { "IdStateRequest" }, "id_state_request");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("SkillSwap.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Responsable de la gestión y configuración del sitio, incluyendo la moderación de contenido, la gestión de usuarios.",
                            Name = "Administrador"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Un profesional que busca oportunidades laborales o empleadores que buscan candidatos.",
                            Name = "Usuario"
                        });
                });

            modelBuilder.Entity("SkillSwap.Models.StateReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("State_reports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "El reporte no ha sido solucionado y está esperando revisión o respuesta por parte del administrador.",
                            Name = "Pendiente"
                        },
                        new
                        {
                            Id = 2,
                            Description = "El reporte esta siendo revisado por el administrador.",
                            Name = "En proceso"
                        },
                        new
                        {
                            Id = 3,
                            Description = "El reporte ha sido revisado y aceptado por el administrador.",
                            Name = "Resuelto"
                        });
                });

            modelBuilder.Entity("SkillSwap.Models.StateRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("State_requests", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "La solicitud ha sido enviada y está esperando revisión o respuesta por parte del destinatario.",
                            Name = "Pendiente"
                        },
                        new
                        {
                            Id = 2,
                            Description = "La solicitud ha sido revisada y aceptada por el destinatario, lo que indica que se ha establecido una conexión o se ha acordado proceder con la solicitud.",
                            Name = "Aceptado"
                        },
                        new
                        {
                            Id = 3,
                            Description = "La solicitud ha sido revisada pero no ha sido aceptada por el destinatario, lo que indica que no se procederá con la solicitud en este momento.",
                            Name = "Rechazado"
                        });
                });

            modelBuilder.Entity("SkillSwap.Models.StateUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<int?>("DurationSuspension")
                        .HasColumnType("int(11)")
                        .HasColumnName("duration_suspension");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("State_users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "La cuenta está completamente operativa y en uso.",
                            DurationSuspension = 0,
                            Name = "Activo"
                        },
                        new
                        {
                            Id = 2,
                            Description = " La cuenta ha sido revisada y está en un estado de pausa o desactivación temporal. ",
                            DurationSuspension = 0,
                            Name = "Inactivo"
                        },
                        new
                        {
                            Id = 3,
                            Description = "La cuenta ha sido suspendida durante 5 dias",
                            DurationSuspension = 5,
                            Name = "Suspendido"
                        });
                });

            modelBuilder.Entity("SkillSwap.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date")
                        .HasColumnName("birthdate");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<int?>("IdAbility")
                        .HasColumnType("int");

                    b.Property<int?>("IdQualification")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_qualification");

                    b.Property<int?>("IdRol")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_rol");

                    b.Property<int?>("IdState")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_state");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("job_title");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_reset_token");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasMaxLength(65)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("password_reset_token_expiry");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("phone_number");

                    b.Property<DateOnly?>("ReactivationDate")
                        .HasColumnType("date")
                        .HasColumnName("reactivation_date");

                    b.Property<DateOnly?>("SuspensionDate")
                        .HasColumnType("date")
                        .HasColumnName("suspension_date");

                    b.Property<string>("UrlBehance")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("url_behance");

                    b.Property<string>("UrlGithub")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("url_github");

                    b.Property<string>("UrlImage")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("url_image");

                    b.Property<string>("UrlLinkedin")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("url_linkedin");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("IdAbility")
                        .IsUnique();

                    b.HasIndex("IdQualification")
                        .IsUnique();

                    b.HasIndex(new[] { "IdRol" }, "id_rol");

                    b.HasIndex(new[] { "IdState" }, "id_state");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthdate = new DateOnly(2000, 5, 23),
                            CreatedAt = new DateOnly(2024, 9, 23),
                            Description = "Desarrollador full-stack especializado en aplicaciones web.",
                            Email = "arlex.z96@gmail.com",
                            IdAbility = 1,
                            IdQualification = 1,
                            IdRol = 1,
                            IdState = 1,
                            JobTitle = "Desarrollador Web",
                            LastName = "zapata",
                            Name = "arlex",
                            Password = "AQAAAAIAAYagAAAAEHruOsnMbKhFXd6/yay9YBypEcyAHSNZb7Y/JTrL0YxZrJkno8qsHEmrlY4AVEDIow==",
                            PhoneNumber = "+1234567891",
                            UrlGithub = "https://github.com/arlexz96",
                            UrlImage = "https://media.istockphoto.com/id/1200677760/es/foto/retrato-de-apuesto-joven-sonriente-con-los-brazos-cruzados.jpg?s=612x612&w=0&k=20&c=RhKR8pxX3y_YVe5CjrRnTcNFEGDryD2FVOcUT_w3m4w=",
                            UrlLinkedin = "https://www.linkedin.com/in/arlex-zapata-02aab6243/"
                        },
                        new
                        {
                            Id = 2,
                            Birthdate = new DateOnly(1999, 3, 14),
                            CreatedAt = new DateOnly(2024, 9, 23),
                            Description = "Diseñador creativo con pasión por UX/UI.",
                            Email = "franco@gmail.com",
                            IdAbility = 2,
                            IdQualification = 2,
                            IdRol = 2,
                            IdState = 1,
                            JobTitle = "Diseñador Gráfico",
                            LastName = "mena",
                            Name = "franco",
                            Password = "AQAAAAIAAYagAAAAECqJixbLTu6Int3XFt3rjZuppKnxyPqFrabpKrxgYjUqXJQjdsaqNcy1kGgDIElqXQ==",
                            PhoneNumber = "+1234567892",
                            UrlBehance = "https://www.behance.net/franccoina",
                            UrlImage = "https://media.istockphoto.com/id/1200677760/es/foto/retrato-de-apuesto-joven-sonriente-con-los-brazos-cruzados.jpg?s=612x612&w=0&k=20&c=RhKR8pxX3y_YVe5CjrRnTcNFEGDryD2FVOcUT_w3m4w=",
                            UrlLinkedin = "https://www.linkedin.com/in/franccoina/"
                        },
                        new
                        {
                            Id = 3,
                            Birthdate = new DateOnly(2000, 7, 30),
                            CreatedAt = new DateOnly(2024, 9, 23),
                            Description = "Experto en comunicaciones corporativas y oratoria.",
                            Email = "jonathan@gmail.com",
                            IdAbility = 3,
                            IdQualification = 3,
                            IdRol = 2,
                            IdState = 1,
                            JobTitle = "Especialista en Comunicaciones",
                            LastName = "escobar",
                            Name = "jonathan",
                            Password = "AQAAAAIAAYagAAAAEFdxBIFNcg+F3QnhiCx4UTNflpYKY7KaIQGgvG5sKwBqc5hxo3O1avoB9BBuZWm+Iw==",
                            PhoneNumber = "+1234567893",
                            UrlImage = "https://st4allthings4p4ci.blob.core.windows.net/allthingshair/allthingshair/wp-content/uploads/sites/13/2023/04/43848/cortes-de-pelo-para-hombres-jovenes-nueva.jpg",
                            UrlLinkedin = "https://www.linkedin.com/in/jonathanescobarm/"
                        },
                        new
                        {
                            Id = 4,
                            Birthdate = new DateOnly(2005, 11, 11),
                            CreatedAt = new DateOnly(2024, 2, 1),
                            Description = "Estratega de marketing digital enfocado en SEO y marketing de contenidos.",
                            Email = "joan@ejemplo.com",
                            IdAbility = 4,
                            IdQualification = 4,
                            IdRol = 2,
                            IdState = 1,
                            JobTitle = "Especialista en Marketing",
                            LastName = "zapata",
                            Name = "joan",
                            Password = "AQAAAAIAAYagAAAAEBGmgqjt756eGRvzjvUTU0NueOsT1AGhdMOZERo6O8bZLAcJvYHlWHZoEVKItOFdbQ==",
                            PhoneNumber = "+1234567894",
                            UrlImage = "https://media.istockphoto.com/id/1319763895/es/foto/sonriente-raza-mixta-hombre-maduro-sobre-fondo-gris.jpg?s=612x612&w=0&k=20&c=sGBwMEZr8RdyFuOF0084teSTc1TwMzdpHjowP9QRWTw=",
                            UrlLinkedin = "https://www.linkedin.com/in/davebrown"
                        },
                        new
                        {
                            Id = 5,
                            Birthdate = new DateOnly(1999, 6, 20),
                            CreatedAt = new DateOnly(2024, 1, 1),
                            Description = "Productora y editora con experiencia en producción de video y audio.",
                            Email = "luisa@gmail.com",
                            IdAbility = 5,
                            IdQualification = 5,
                            IdRol = 2,
                            IdState = 1,
                            JobTitle = "Productora de Entretenimiento",
                            LastName = "ramirez",
                            Name = "luisa",
                            Password = "AQAAAAIAAYagAAAAEN9fBAoMmgfs822RMB3fyT4Mwa+o+8N8w5yGDR6lhyZJxSKcoVQ2u2aPD5/OXMGmfw==",
                            PhoneNumber = "+1234567895",
                            UrlImage = "https://media.istockphoto.com/id/1369508766/es/foto/hermosa-mujer-latina-exitosa-sonriendo.jpg?s=612x612&w=0&k=20&c=f-3MdwiVjpE4UWQdqLC3vpWViYMCiGUPr5aKLCmTnDI=",
                            UrlLinkedin = "https://www.linkedin.com/in/luisa-fernanda-ram%C3%ADrez-cardona-0b486565/"
                        },
                        new
                        {
                            Id = 6,
                            Birthdate = new DateOnly(1993, 4, 10),
                            CreatedAt = new DateOnly(2024, 2, 1),
                            Description = "Desarrolladora web apasionada por el frontend.",
                            Email = "user6@ejemplo.com",
                            IdAbility = 6,
                            IdQualification = 6,
                            IdRol = 2,
                            IdState = 1,
                            JobTitle = "Desarrolladora Frontend",
                            LastName = "Torres",
                            Name = "Laura",
                            Password = "AQAAAAIAAYagAAAAELpqOPl4r8ACDYYf8KfRxZIDWjrTJ3oS0EZur5/cuu1pkJy/bFqcMJcVrcQr22TB5g==",
                            PhoneNumber = "+1234567801",
                            UrlGithub = "https://github.com/lauratorres",
                            UrlImage = "https://randomuser.me/api/portraits/women/6.jpg",
                            UrlLinkedin = "https://www.linkedin.com/in/lauratorres"
                        },
                        new
                        {
                            Id = 7,
                            Birthdate = new DateOnly(1985, 8, 20),
                            CreatedAt = new DateOnly(2024, 2, 1),
                            Description = "Experto en análisis de datos y visualización.",
                            Email = "user7@ejemplo.com",
                            IdAbility = 7,
                            IdQualification = 7,
                            IdRol = 2,
                            IdState = 1,
                            JobTitle = "Analista de Datos",
                            LastName = "Ramírez",
                            Name = "Javier",
                            Password = "AQAAAAIAAYagAAAAEEXEFAUcr56TewfkPksfpNPNhyCqn/PW9CHmBHTNHQmmiT3gmMrH/RtLiz7r39+Z8A==",
                            PhoneNumber = "+1234567802",
                            UrlImage = "https://randomuser.me/api/portraits/men/7.jpg",
                            UrlLinkedin = "https://www.linkedin.com/in/javierramirez"
                        },
                        new
                        {
                            Id = 8,
                            Birthdate = new DateOnly(1991, 12, 15),
                            CreatedAt = new DateOnly(2024, 3, 1),
                            Description = "Content creator y especialista en redes sociales.",
                            Email = "user8@ejemplo.com",
                            IdAbility = 8,
                            IdQualification = 8,
                            IdRol = 2,
                            IdState = 1,
                            JobTitle = "Gestora de Redes Sociales",
                            LastName = "Gómez",
                            Name = "Sofía",
                            Password = "AQAAAAIAAYagAAAAEFSRiiyzMgNF8ihmuFEQri/AMpVJ4hUBl9OHzR91EwFpeAz+TIH0DW4+iuMERMRlrQ==",
                            PhoneNumber = "+1234567803",
                            UrlBehance = "https://www.behance.net/sofiagomez",
                            UrlImage = "https://randomuser.me/api/portraits/women/8.jpg",
                            UrlLinkedin = "https://www.linkedin.com/in/sofiagomez"
                        },
                        new
                        {
                            Id = 9,
                            Birthdate = new DateOnly(1982, 6, 30),
                            CreatedAt = new DateOnly(2024, 4, 1),
                            Description = "Productor de cine y director.",
                            Email = "user9@ejemplo.com",
                            IdAbility = 9,
                            IdQualification = 9,
                            IdRol = 2,
                            IdState = 1,
                            JobTitle = "Productor de Cine",
                            LastName = "Martínez",
                            Name = "Fernando",
                            Password = "AQAAAAIAAYagAAAAEDsbClb67rAQ68ich9R51O7RrlGB39ClA/ZhGRQ1acnIBc4R2htUQQrO4nwzs42JNQ==",
                            PhoneNumber = "+1234567804",
                            UrlImage = "https://randomuser.me/api/portraits/men/9.jpg",
                            UrlLinkedin = "https://www.linkedin.com/in/fernandomartinez"
                        },
                        new
                        {
                            Id = 10,
                            Birthdate = new DateOnly(1994, 11, 5),
                            CreatedAt = new DateOnly(2024, 5, 1),
                            Description = "Desarrolladora de aplicaciones móviles.",
                            Email = "user10@ejemplo.com",
                            IdAbility = 10,
                            IdQualification = 10,
                            IdRol = 2,
                            IdState = 1,
                            JobTitle = "Desarrolladora Móvil",
                            LastName = "Pérez",
                            Name = "Valentina",
                            Password = "AQAAAAIAAYagAAAAEEnUgtOTa25XVw/HzmgAgiY4ZA+jtHveiqVxc24+tC72VlEdbL8su8csCtZZMvVNww==",
                            PhoneNumber = "+1234567805",
                            UrlGithub = "https://github.com/valentinaperez",
                            UrlImage = "https://randomuser.me/api/portraits/women/10.jpg",
                            UrlLinkedin = "https://www.linkedin.com/in/valentinaperez"
                        });
                });

            modelBuilder.Entity("SkillSwap.Models.Report", b =>
                {
                    b.HasOne("SkillSwap.Models.User", "UserReported")
                        .WithMany()
                        .HasForeignKey("IdReportedUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillSwap.Models.StateReport", "StateReport")
                        .WithMany()
                        .HasForeignKey("IdState")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillSwap.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StateReport");

                    b.Navigation("User");

                    b.Navigation("UserReported");
                });

            modelBuilder.Entity("SkillSwap.Models.Request", b =>
                {
                    b.HasOne("SkillSwap.Models.User", "IdReceivingUserNavigation")
                        .WithMany("RequestIdReceivingUserNavigations")
                        .HasForeignKey("IdReceivingUser")
                        .HasConstraintName("Requests_ibfk_2");

                    b.HasOne("SkillSwap.Models.User", "IdRequestingUserNavigation")
                        .WithMany("RequestIdRequestingUserNavigations")
                        .HasForeignKey("IdRequestingUser")
                        .HasConstraintName("Requests_ibfk_3");

                    b.HasOne("SkillSwap.Models.StateRequest", "IdStateRequestNavigation")
                        .WithMany("Requests")
                        .HasForeignKey("IdStateRequest")
                        .HasConstraintName("Requests_ibfk_1");

                    b.Navigation("IdReceivingUserNavigation");

                    b.Navigation("IdRequestingUserNavigation");

                    b.Navigation("IdStateRequestNavigation");
                });

            modelBuilder.Entity("SkillSwap.Models.User", b =>
                {
                    b.HasOne("SkillSwap.Models.Ability", "Ability")
                        .WithOne("User")
                        .HasForeignKey("SkillSwap.Models.User", "IdAbility")
                        .HasConstraintName("Users_ibfk_3");

                    b.HasOne("SkillSwap.Models.Qualification", "Qualification")
                        .WithOne("User")
                        .HasForeignKey("SkillSwap.Models.User", "IdQualification")
                        .HasConstraintName("Qualification_CualificationProfile_FK");

                    b.HasOne("SkillSwap.Models.Role", "IdRolNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdRol")
                        .HasConstraintName("Users_ibfk_2");

                    b.HasOne("SkillSwap.Models.StateUser", "IdStateNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdState")
                        .HasConstraintName("Users_ibfk_1");

                    b.Navigation("Ability");

                    b.Navigation("IdRolNavigation");

                    b.Navigation("IdStateNavigation");

                    b.Navigation("Qualification");
                });

            modelBuilder.Entity("SkillSwap.Models.Ability", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("SkillSwap.Models.Qualification", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("SkillSwap.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SkillSwap.Models.StateRequest", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("SkillSwap.Models.StateUser", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SkillSwap.Models.User", b =>
                {
                    b.Navigation("RequestIdReceivingUserNavigations");

                    b.Navigation("RequestIdRequestingUserNavigations");
                });
#pragma warning restore 612, 618
        }
    }
}
